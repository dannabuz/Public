Show each gift card purchased: id, amount_worth and the total number of all gift cards purchased.

SELECT
  id,
  amount_worth,
  COUNT(id) OVER()
FROM giftcard;


Show each subscription: id, length, start_date, payment_amount and the total amount paid for all subscriptions ever.


SELECT
  id,
  length,
  start_date,
  payment_amount,
  SUM(payment_amount) OVER()
FROM subscription;


Show each single rental: id, rental_period, payment_amount, the average amount paid from all the single rentals ever and the ratio of the two last columns.


SELECT
  id,
  rental_period,
  payment_amount,
  AVG(payment_amount) OVER(),
  payment_amount / AVG(payment_amount) OVER()
FROM single_rental;


For each movie, show its title, editor_rating, genre and the average editor_rating of all movies of the same genre.


SELECT
  title,
  editor_rating,
  genre,
  AVG(editor_rating) OVER(PARTITION BY genre)
FROM movie;




For each distinctive movie, show the title, the average customer rating for that movie (as the avg_movie_rating column), the average customer rating for the entire genre (as the avg_genre_rating column), and the average customer rating for all movies (as the avg_rating column).

SELECT DISTINCT
  title,
  AVG(rating) OVER(partition by movie_id) AS avg_movie_rating,
  AVG(rating) OVER(partition by genre) AS avg_genre_rating,
  AVG(rating) OVER() AS avg_rating
FROM movie
JOIN review
  ON movie.id = review.movie_id;
  
  
  Show:

distinctive amount_worth values of giftcards,
count of the number of giftcards with this value that were ever purchased (shown as count_1),
count of all giftcards ever purchased (shown as count_2),
show the percentage that the respective giftcard type constitutes in relation to all gift cards. Show the last column rounded to integer values and name it percentage

SELECT DISTINCT
  amount_worth,
  COUNT(id) OVER(PARTITION BY amount_worth) AS count_1,
  COUNT(id) OVER() AS count_2,
  ROUND(100 * CAST(COUNT(id) OVER(PARTITION BY amount_worth) AS numeric) / COUNT(id) OVER()) AS percentage
FROM giftcard;




For each customer, show the following information: first_name, last_name, the average payment_amount from single rentals by that customer and the average payment_amount from single rentals by any customer from the same country.

SELECT DISTINCT
  first_name,
  last_name,
  AVG(payment_amount) OVER(PARTITION BY customer.id),
  AVG(payment_amount) OVER(PARTITION BY country)
FROM customer
JOIN single_rental
  ON customer.id = single_rental.customer_id;
  
  
  For each movie, show the following information: title, release_year, editor_rating and the rank based on editor_rating. The movie with the highest editor_rating should have rank = 1. The same rank values are possible for multiple rows, but don't leave gaps in numbering.
  
  
  SELECT
  title,
  release_year,
  editor_rating,
  DENSE_RANK() OVER (ORDER BY editor_rating DESC)
FROM movie;


Rank single_rentals in accordance with the price paid for them. For each single_rental, show the movie title, rental_period, payment_amount and the rank. Multiple single_rentals can share the same rank, the highest amount should have rank = 1 and gaps in numbering are allowed, too.


SELECT
  title,
  rental_period,
  payment_amount,
  RANK() OVER(ORDER BY payment_amount DESC)
FROM single_rental
JOIN movie
  ON single_rental.movie_id = movie.id;
  
  
  Show the first and last name of the customer who bought the second most recent giftcard along with the date when the payment took place. Assume that an individual rank is assigned for each giftcard purchase.
  
  
  WITH ranking AS (
  SELECT
    first_name,
    last_name,
    payment_date,
    ROW_NUMBER() OVER(ORDER BY payment_date DESC) AS rank
  FROM customer
  JOIN giftcard
    ON customer.id = giftcard.customer_id
)

SELECT
  first_name,
  last_name,
  payment_date
FROM ranking
WHERE rank = 2;



For each single rental, show the rental_date, the title of the movie rented, its genre, the payment_amount and the rank of the rental in terms of the price paid (the most expensive rental should have rank = 1). The ranking should be created separately for each movie genre. Allow the same rank for multiple rows and allow gaps in numbering too.


SELECT
  rental_date,
  title,
  genre,
  payment_amount,
  RANK() OVER(PARTITION BY genre ORDER BY payment_amount DESC)
FROM movie
JOIN single_rental
  ON single_rental.movie_id = movie.id;
  
  
  For each single rental, show the id, rental_date, payment_amount and the running total of payment_amounts of all rentals from the oldest one (in terms of rental_date) until the current row.
  
  SELECT
  id,
  rental_date,
  payment_amount,
  SUM(payment_amount) OVER(
    ORDER BY rental_date
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM single_rental;


For each single rental, show its id, rental_date, platform, payment_date, payment_amount and the average payment amount calculated by taking into account the previous two rows, the current row and the next two rows when sorted by the payment_date

SELECT
  id,
  rental_date,
  platform,
  payment_date,
  payment_amount,
  AVG(payment_amount) OVER(
    ORDER BY payment_date
    ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING)
FROM single_rental;


For each subscription, show the following columns: id, length, platform, payment_date, payment_amount and the future cashflows calculated as the total money from all subscriptions starting from the beginning of the payment_date of the current row (i.e. include any other payments on the very same date) until the very end.

SELECT
  id,
  length,
  platform,
  payment_date,
  payment_amount,
  SUM(payment_amount) OVER(
    ORDER BY payment_date
    RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM subscription;


For each single rental, show the following information: rental_date, title of the movie rented, genre of the movie, payment_amount and the highest payment_amount for any movie in the same genre rented from the first day up to the current rental_date. Show the last column as highest_amount.

SELECT
  rental_date,
  title,
  genre,
  payment_amount,
  MAX(payment_amount) OVER(
    PARTITION BY genre
    ORDER BY rental_date
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
  ) AS highest_amount
FROM movie
JOIN single_rental
  ON single_rental.movie_id = movie.id;
  
  
  For each giftcard, show its amount_worth, payment_amount and two more columns: the payment_amount of the first and last giftcards purchased in terms of the payment_date.
  
  SELECT
  amount_worth,
  payment_amount,
  FIRST_VALUE(payment_amount) OVER(ORDER BY payment_date),
  LAST_VALUE(payment_amount) OVER(
    ORDER BY payment_date
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM giftcard;


For each single rental, show the following columns: id, payment_date, payment_amount, the payment_amount of the previous single_rental in terms of the payment_date and the difference between the last two values.

SELECT
  id,
  payment_date,
  payment_amount,
  LAG(payment_amount) OVER(ORDER BY payment_date),
  payment_amount - LAG(payment_amount) OVER(ORDER BY payment_date)
FROM single_rental;



For each rental date, show the rental_date, the sum of payment amounts (column name payment_amounts) from single_rentals on that day, the sum of payment_amounts on the previous day and the difference between these two values.

WITH temporary AS (
  SELECT
    rental_date,
    SUM(payment_amount) AS payment_amounts
  FROM single_rental
  GROUP BY rental_date
)

SELECT
  rental_date,
  payment_amounts,
  LAG(payment_amounts) OVER(ORDER BY rental_date),
  payment_amounts - LAG(payment_amounts) OVER(ORDER BY rental_date) AS difference
FROM temporary;



For each customer, show the following information: first_name, last_name, the sum of payments (AS sum_of_payments) for all single rentals and the sum of payments of the median customer in terms of the sum of payments (since there are 7 customers, pick the 4th customer as the median).


SELECT
  first_name,
  last_name,
  SUM(payment_amount) AS sum_of_payments,
  NTH_VALUE(SUM(payment_amount), 4) OVER(
    ORDER BY SUM(payment_amount)
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM single_rental
JOIN customer
  ON customer.id = single_rental.customer_id
GROUP BY first_name, last_name;


For each movie, show its title, genre, editor_rating and its rank based on editor_rating for all the movies in the same genre.


SELECT
  title,
  genre,
  editor_rating,
  RANK() OVER(PARTITION BY genre ORDER BY editor_rating DESC)
FROM movie;


For each review, show the following information: its id, title of the movie, the rating and the previous rating given by any customer to the same movie when sorted by the id of the reviews.

SELECT
  review.id,
  title,
  rating,
  LAG(rating) OVER(PARTITION BY movie_id ORDER BY review.id)
FROM review
JOIN movie
  ON review.movie_id = movie.id;
  
  
  For each movie, show the following information: title, genre, average user rating for that movie and its rank in the respective genre based on that average rating in descending order (so that the best movies will be shown first).
  
  SELECT
  title,
  genre,
  AVG(rating),
  RANK() OVER(
    PARTITION BY genre
    ORDER BY AVG(rating) DESC)
FROM movie m
JOIN review r
  ON m.id = r.movie_id
GROUP BY title, genre;


For each platform, show the following columns: platform, sum of subscription payments for that platform and its rank based on that sum (the platform with the highest sum should get the rank of 1).


SELECT
  platform,
  SUM(payment_amount),
  RANK() OVER(ORDER BY SUM(payment_amount) DESC)
FROM subscription
GROUP BY platform;


Divide subscriptions into three groups (buckets) based on the payment_amount. Group the rows based on those buckets. Show the following columns: bucket, minimal payment_amount in that bucket and maximal payment_amount in that bucket.


SELECT
  bucket,
  MIN(payment_amount),
  MAX(payment_amount)
FROM (
  SELECT
    payment_amount,
    NTILE(3) OVER(ORDER BY payment_amount) AS bucket
  FROM subscription) c
GROUP BY bucket;




For each doctor, show first_name, last_name, age and the average age of all doctors.

SELECT
  first_name,
  last_name,
  age,
  AVG(age) OVER()
FROM doctor;


For each procedure, show its id, category, price and the total sum of prices from all procedures in the same category.


SELECT
  id,
  category,
  price,
  SUM(price) OVER(PARTITION BY category)
FROM procedure;


For each procedure, show its name, the first and last name of the doctor, the score and the rank of the procedure in its category based on its score. The best procedure should get rank = 1. Allow multiple procedures with the same rank and gaps in numbering.


SELECT
  name,
  first_name,
  last_name,
  score,
  RANK() OVER(PARTITION BY category ORDER BY score DESC)
FROM doctor
JOIN procedure
  ON doctor.id = procedure.doctor_id;
  
  
  For the third most expensive procedure ever, show the following information: doctor_id, name, procedure_date and price
  
  
  
  WITH ranking AS (
  SELECT
    doctor_id,
    name,
    procedure_date,
    price,
    RANK() OVER(ORDER BY price DESC) AS rank
  FROM procedure
)

SELECT
  doctor_id,
  name,
  procedure_date,
  price
FROM ranking
WHERE rank = 3;


For each procedure, show the following information: procedure_date, doctor_id, category, name, score and the average score from the procedures in the same category which are included in the following window frame: two previous rows, current row, three following rows in terms of the procedure date.

SELECT
  procedure_date,
  doctor_id,
  category,
  name,
  score,
  AVG(score) OVER(
    PARTITION BY category
    ORDER BY procedure_date
    ROWS BETWEEN 2 PRECEDING AND 3 FOLLOWING)
FROM procedure;


For each procedure, show the following information: procedure_date, category, doctor_id, patient_id, name, price and the total sum of prices from all procedures from the first day until the end of the current day.


SELECT
  procedure_date,
  category,
  doctor_id,
  patient_id,
  name,
  price,
  SUM(price) OVER(
    ORDER BY procedure_date
    RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM procedure;


For each procedure, show the following information: id, procedure_date, name, price, price of the previous procedure (in terms of the id) and the difference between these two values.

SELECT
  id,
  procedure_date,
  name,
  price,
  LAG(price) OVER(ORDER BY id),
  price - LAG(price) OVER(ORDER BY id)
FROM procedure;


For each procedure, show the following information: procedure_date, name, price, the procedure_date of the newest procedure in the same category together with its price. Show the last two colums as most_recent_date and most_recent_price


SELECT
  procedure_date,
  name,
  price,
  LAST_VALUE(procedure_date) OVER(
    PARTITION BY category
    ORDER BY procedure_date
    ROWS BETWEEN UNBOUNDED PRECEDING
      AND UNBOUNDED FOLLOWING) AS most_recent_date,
  LAST_VALUE(price) OVER(
    PARTITION BY category
    ORDER BY procedure_date
    ROWS BETWEEN UNBOUNDED PRECEDING
      AND UNBOUNDED FOLLOWING) AS most_recent_price
FROM procedure;


For each procedure, show the name, score, price, category, the average price in its category (as avg_price), the average score in its category (as avg_score) and its rank in the category based on its score (procedure with the highest score should get rank 1). Multiple procedures may share the same rank, but don't allow gaps in numbering.


SELECT
  name,
  score,
  price,
  category,
  AVG(price) OVER(PARTITION BY category) AS avg_price,
  AVG(score) OVER(PARTITION BY category) AS avg_score,
  DENSE_RANK() OVER(PARTITION BY category ORDER BY score DESC)
FROM procedure;


For each procedure, show the following information: procedure_date, name, price, category, score, the price of the best procedure (in terms of the score) from the same category (column best_procedure) and the difference between price and best_procedure (column difference).


SELECT 
  procedure_date, 
  name, 
  price,
  category,
  score, 
  FIRST_VALUE(price) OVER(PARTITION BY category ORDER BY score DESC) AS best_procedure,
  price - FIRST_VALUE(price) OVER(PARTITION BY category ORDER BY score DESC) AS difference
FROM procedure;


Find out which doctor is the best for each procedure.

For each procedure select procedure name and the first and last name of a doctor who got high scores (higher than or equal to average score for this procedure) the most often (rank = 1)


WITH cte AS (
  SELECT
    name,
    first_name,
    last_name,
    COUNT(*) c,
    RANK() OVER(PARTITION BY name ORDER BY count(*) DESC) AS rank
  FROM procedure p 
  JOIN doctor d
    ON p.doctor_id = d.id
  WHERE score >= (SELECT avg(score) FROM procedure pl WHERE pl.name = p.name)
  GROUP BY name, first_name, last_name
)

SELECT 
  name,
  first_name,
  last_name
FROM cte
WHERE rank = 1


