in Part 1, we said that you can't use window functions in the WHERE clause. Why is that so? Because all query elements are processed in a very strict order:

FROM – the database gets the data from tables in FROM clause and if necessary performs the JOINs,
WHERE – the data are filtered with conditions specified in WHERE clause,
GROUP BY – the data are grouped by with conditions specified in WHERE clause,
aggregate functions – the aggregate functions are applied to the groups created in the GROUP BY phase,
HAVING – the groups are filtered with the given condition,
window functions,
SELECT – the database selects the given columns,
DISTINCT – repeated values are removed,
UNION/INTERSECT/EXCEPT – the database applies set operations,
ORDER BY – the results are sorted,
OFFSET – the first rows are skipped,
LIMIT/FETCH/TOP – only the first rows are selected
Practically, this order means that you can't put window functions anywhere in the FROM, WHERE, GROUP BY or HAVING clauses. This is because at the time of calculating these elements, window functions are not yet calculated – and it's impossible to use something which is not already available.

Exercise
Find out for yourself that window functions don't work in the WHERE clause. Look at the template: we would like to show some information for those auctions which have their final_price higher than the average final_price.



SELECT 
  id, 
  final_price 
FROM auction 
WHERE final_price > AVG(final_price) OVER()



As you can see, the query did not succeed. So, how can we select some information for those auctions which had their final_price higher than the average final_price? We have to use a subquery. Take a look:

SELECT
  id,
  final_price 
FROM (
  SELECT
    id,
    final_price,
    AVG(final_price) OVER() AS avg_final_price
  FROM auction) c
WHERE final_price > avg_final_price
In the FROM clause, we introduced a subquery where we selected both the final_price for each auction and the average final_price. Because the whole subquery is calculated before the external query, we can use avg_final_price in the external query.

Exercise
Find the id, country and views for those auctions where the number of views was below the average.


SELECT
  id,
  country,
  views
FROM (
  SELECT
    id,
    country,
    views,
    AVG(views) OVER() AS avg_views
  FROM auction) c
WHERE views < avg_views;




 The same problem occurs when we try to use a window function in the HAVING clause.
 
 
 This time, find out for yourself that window functions don't work in the HAVING clause. Look at the template: we would like to show those countries that have the average final price higher than the average final price from all over the world. Try to run this query.
 
 
 SELECT 
  country, 
  AVG(final_price) 
FROM auction 
GROUP BY country 
HAVING AVG(final_price) > AVG(final_price) OVER ();



no window functions are allowed in HAVING either. Okay, you know that the remedy is to use a subquery. Try to correct the query on your own. Don't worry if you can't, the hint will be waiting for you in case you need it.

Exercise
Again, we would like to show those countries (country name and average final price) that have the average final price higher than the average price from all over the world. Correct the query by using a subquery.


SELECT
  country,
  AVG(final_price) 
FROM auction 
GROUP BY country 
HAVING AVG(final_price) > (SELECT AVG(final_price) FROM auction);


The GROUP BY clause is also calculated before window functions. This means that we can't group by the values obtained with window functions. Let's check that.

Exercise
Try to run the template query. The idea is as follows: we want to divide auctions into four equal groups (quartiles) based on the number of views and show the minimal and maximal value for each group. Will this query work out?


SELECT 
  NTILE(4) OVER(ORDER BY views DESC) AS quartile, 
  MIN(views), 
  MAX(views) 
FROM auction 
GROUP BY NTILE(4) OVER(ORDER BY views DESC);


As anticipated, the query failed. So, what can we do to make the query work? Again, we'll use a subquery:

SELECT
  quartile,
  MIN(views),
  MAX(views)
FROM
  (SELECT
    views,
    ntile(4) OVER(ORDER BY views DESC) AS quartile
  FROM auction) c
GROUP BY quartile;
We used the window function in the inner query, which is why we could use it for grouping in the external query.

Exercise
Now, divide all auctions into 6 equal groups based on the asking_price in ascending order. Show columns group_no, minimal, average and maximal value for that group. Sort by the group in ascending order.


SELECT
  group_no,
  MIN(asking_price),
  AVG(asking_price),
  MAX(asking_price)
FROM (
  SELECT
    asking_price,
    NTILE(6) OVER(ORDER BY asking_price) AS group_no
  FROM auction) c
GROUP BY group_no
ORDER BY group_no;


So, to sum up this section, remember the following rule: the only places where we can use window functions without having to write subqueries are the SELECT and ORDER BY clauses. In all other places you have to use subqueries.



For each auction, show the following columns: id, views and quartile based on the number of views in descending order. Order the rows by the quartile.


SELECT
  id,
  views,
  NTILE(4) OVER(ORDER BY views DESC) AS quartile
FROM auction
ORDER BY NTILE(4) OVER(ORDER BY views DESC);



Before, we said that window functions were calculated after the GROUP BY clause. This has a very important implication for our queries: if the query uses any aggregates, GROUP BY or HAVING, the window function sees the group rows instead of the original table rows.

To get a better understanding of this phenomenon, take a look at the following example:

SELECT 
  category_id,
  final_price, 
  AVG(final_price) OVER() 
FROM auction;
This simple query will show the id and final_price of each auction alongside the average final_price from all the auctions. Now, take a look at the modified example with grouping:

SELECT 
  category_id,
  MAX(final_price), 
  AVG(final_price) OVER() 
FROM auction 
GROUP BY category_id;
Will this query work? Let's find out!

Exercise
Try to run the template query from the example.

As you can see, the query doesn't work. This is because we can't use the column final_price in the window function. Once the rows have been grouped, there is no final_price value that makes sense for all the rows together.


SELECT 
  category_id, 
  MAX(final_price), 
  AVG(final_price) OVER() 
FROM auction 
GROUP BY category_id


 As you can see, the query failed. However, let's take a look at another modification of this example:

SELECT
  category_id,
  MAX(final_price) AS max_final, 
  AVG(MAX(final_price)) OVER()
FROM auction
GROUP BY category_id;
What will happen now?

Exercise
Run the template.

As you can see, the query now succeeded because we used an aggregate function (MAX(final_price)) that was indeed available after grouping the rows. By the way, this is the only place where you can nest aggregate functions inside one another.


SELECT 
  category_id, 
  MAX(final_price) AS max_final, 
  AVG(MAX(final_price)) OVER() 
FROM auction 
GROUP BY category_id


The best way to correctly create queries with window functions and GROUP BY is as follows: first, create the query with GROUP BY, but without window functions. Run the query (in the database or in your head). Now, the columns you see in the result are the only columns you can use in your window functions.

Exercise
Group the auctions by the country. Show the country, the minimal number of participants in an auction and the average minimal number of participants across all countries.


SELECT
  country,
  MIN(participants),
  AVG(MIN(participants)) OVER()
FROM auction
GROUP BY country;


Group the auctions by category_id and show the category_id and maximal asking price in that category alongside the average maximal price across all categories.


SELECT
  category_id,
  MAX(asking_price),
  AVG(MAX(asking_price)) OVER() 
FROM auction
GROUP BY category_id;


As you can see, it's fairly simple to create quite advanced statistics very easily thanks to how window functions behave with GROUP BY. Let's take a look at other use cases.

For instance, we may make a ranking based on an aggregate function. Take a look:

SELECT
  country,
  COUNT(id),
  RANK() OVER(ORDER BY COUNT(id) DESC)
FROM auction
GROUP BY country;
We grouped auctions with respect to the country, counted the number of auctions from each country... and then we created a ranking based on that count of auctions.

Exercise
Now, group the auctions based on the category. Show category_id, the sum of final prices for auctions from this category and a ranking based on that sum, with the highest sum coming first.


SELECT
  category_id,
  SUM(final_price),
  RANK() OVER(ORDER BY SUM(final_price) DESC)
FROM auction
GROUP BY category_id;


Group the auctions based on the day they ended and show the following columns: ended, the average number of views from auctions on that day and the ranking based on that average (the highest average should get the rank of 1).


SELECT
  ended,
  AVG(views),
  RANK() OVER(ORDER BY AVG(views) DESC)
FROM auction
GROUP BY ended;


Another thing we can do with window functions when rows are grouped are leads, lags and day-to-day deltas. Take a look:

SELECT
  ended,
  SUM(final_price) AS sum_price,
  LAG(SUM(final_price)) OVER(ORDER BY ended)
FROM auction
GROUP BY ended
ORDER BY ended
The above query shows each end date with the total price of all items sold on that day and the same total price on the previous day.

Exercise
For each end day, show the following columns:

ended,
the sum of views from auctions that ended on that day,
the sum of views from the previous day (name the column previous_day,
delta – the difference between the sum of views on that day and on the previous day (name the column delta).


SELECT
  ended,
  SUM(views),
  LAG(SUM(views)) OVER(ORDER BY ended) AS previous_day,
  SUM(views) - LAG(SUM(views)) OVER(ORDER BY ended) AS delta 
FROM auction
GROUP BY ended
ORDER BY ended;


Finally, you can use window functions with PARTITION BY on grouped rows. One thing you need to remember is that the window function will only see grouped rows, not the original rows. Take a look:

SELECT
  country,
  ended,
  SUM(views) AS views_on_day,
  SUM(SUM(views)) OVER(PARTITION BY country)
    AS views_country
FROM auction
GROUP BY country, ended
ORDER BY country, ended
The query might require a bit of explanation. First of all, we grouped all rows by the country and ended. Then, we showed the country name and date when the auctions ended. Look what happens in the next two columns. First, we simply sum the views in accordance with our GROUP BY clause, i.e. we get the sum of views in all auctions from the particular country on the particular day. But look what happens next. We use a window function to sum all daily sums for a particular country. As a result, we get the sum of views for a particular country on all days.

Exercise
Group all auctions by the category and end date and show the following columns:

category_id,
ended,
the average daily final price as daily_avg_final_price in that category on that day,
the maximal daily average in that category from any day as daily_max_avg



SELECT  
  category_id,  
  ended,  
  AVG(final_price) AS daily_avg_final_price,
  MAX(AVG(final_price)) OVER(PARTITION BY category_id) AS daily_max_avg 
FROM auction
GROUP BY category_id, ended
ORDER BY category_id, ended;




Window functions can only appear in the SELECT and ORDER BY clauses.
If you need window functions in other parts of the query, use a subquery.
If the query uses aggregates or GROUP BY, remember that the window function can only see the grouped rows instead of the original table rows.



Divide the books into 4 groups based on their rating. For each group (bucket), show its number (column bucket), the minimal and maximal rating in that bucket.


SELECT
  bucket,
  MIN(rating),
  MAX(rating)
FROM (
  SELECT
    rating,
    NTILE(4) OVER(ORDER BY rating) AS bucket
  FROM book) c
GROUP BY bucket;


For each author show:

author_id,
the number of books published by this author (name the column number_of_books),
the rank of the author based on the number of published books in descending order.


SELECT
  author_id,
  COUNT(id) AS number_of_books,
  RANK() OVER(ORDER BY COUNT(id) DESC)
FROM book
GROUP BY author_id;


For each year in which books were published, show the following columns:

publish_year,
the number of books published that year,
the number of books published in the previous year.


SELECT
  publish_year,
  COUNT(id),
  LAG(COUNT(id)) OVER(ORDER BY publish_year)
FROM book
GROUP BY publish_year
ORDER BY publish_year;









